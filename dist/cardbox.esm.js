import t from"fs-extra";import s from"glob";const r={path:"./data/",spaces:2,random:()=>((t=16)=>{(t<=0||"number"!=typeof t)&&(t=16);let s="";for(;t--;)s+=Math.floor(16*Math.random()+1).toString(16).toUpperCase();return s})(6),sync:{create:!0,read:!1,update:!0,delete:!0}};module.exports=class{constructor(t=r){this._options=Object.assign({},r,t,{sync:Object.assign({},r.sync,t.sync)},{format:Object.assign({},r.format,t.format)}),this._options.path+=this._options.path.endsWith("/")?"":"/",this._cards={}}_card_path(t){return`${this._options.path}${t}.json`}async init(){await t.ensureDir(this._options.path)}async load(){return await this.init(),new Promise(r=>{s(`${this._options.path}**/*.json`,{},(s,a)=>{s&&console.error(s),a.forEach(s=>{const r=t.readJsonSync(s,t=>{t&&console.error(t)});this._cards[r.id]=r}),r(!0)})})}async create(s={}){return s.id||(s.id=this._options.random()),this._cards[s.id]=s,await t.writeJson(this._card_path(s.id),s,{spaces:this._options.spaces}),s}async read(t){return new Promise(s=>{t||s(Object.values(this._cards)),s(this._cards[t])})}async update(t,s=this._options.sync.update){return new Promise(async r=>{r(await this.create(t,s))})}async delete(s,r=this._options.sync.update){return new Promise(a=>{s&&this._cards[s]||a(!1);const e=this._card_path(s);t.remove(e,t=>{t&&console.error(t),!0===r&&a(!0)}),delete this._cards[s],!1===r&&a(!0)})}};
